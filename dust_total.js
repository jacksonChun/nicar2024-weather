import axios from 'axios';
import 'dotenv/config';

const apiKey = process.env.DUST_API_KEY;
const botToken = process.env.TELEGRAM_BOT_TOKEN;
const chatId = process.env.TELEGRAM_CHAT_ID;

// ÎØ∏ÏÑ∏Î®ºÏßÄ Îã®Í≥Ñ Íµ¨Î∂Ñ
const getGradeText = (value, type) => {
    if (type === 'PM10') {
        if (value <= 30) return 'Ï¢ãÏùå üòä';
        if (value <= 80) return 'Î≥¥ÌÜµ üòê';
        if (value <= 150) return 'ÎÇòÏÅ® üò∑';
        return 'Îß§Ïö∞ÎÇòÏÅ® üíÄ';
    } else {
        // PM2.5
        if (value <= 15) return 'Ï¢ãÏùå üòä';
        if (value <= 35) return 'Î≥¥ÌÜµ üòê';
        if (value <= 75) return 'ÎÇòÏÅ® üò∑';
        return 'Îß§Ïö∞ÎÇòÏÅ® üíÄ';
    }
};

// Í∏∞Ï§Ä ÏàòÏπò
const PM10_BAD = 81; // ÎØ∏ÏÑ∏Î®ºÏßÄ ÎÇòÏÅ® Í∏∞Ï§Ä
const PM25_BAD = 36; // Ï¥àÎØ∏ÏÑ∏Î®ºÏßÄ ÎÇòÏÅ® Í∏∞Ï§Ä

async function fetchDustData(itemCode) {
    try {
        const url = `http://apis.data.go.kr/B552584/ArpltnStatsSvc/getCtprvnMesureLIst?serviceKey=${apiKey}&returnType=json&numOfRows=1&pageNo=1&itemCode=${itemCode}&dataGubun=HOUR&searchCondition=MONTH`;
        // console.log(`ÏöîÏ≤≠ URL: ${url}`);

        const response = await axios.get(url);
        console.log(`${itemCode} API ÏùëÎãµ:`, JSON.stringify(response.data, null, 2));

        return response.data.response.body.items;
    } catch (error) {
        console.error(`${itemCode} Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïò§Î•ò:`, error.message);
        return [];
    }
}

(async () => {
    try {
        if (!apiKey) {
            console.error('‚ùå DUST_API_KEYÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
            return;
        }
        console.log('ÎØ∏ÏÑ∏Î®ºÏßÄ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå ÏãúÏûë...');

        // PM10Í≥º PM25 Îç∞Ïù¥ÌÑ∞ Í∞ÅÍ∞Å ÏöîÏ≤≠
        const pm10Items = await fetchDustData('PM10');
        const pm25Items = await fetchDustData('PM25');

        const pm10BadAreas = [];
        const pm25BadAreas = [];

        // PM10 Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
        pm10Items.forEach((item) => {
            // dataTimeÏù¥ ÏûàÎäî Í≤ΩÏö∞ÏóêÎßå Ï≤òÎ¶¨
            if (!item.dataTime) return;

            // Î™®Îì† ÏßÄÏó≠ Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
            Object.entries(item).forEach(([area, value]) => {
                // dataTime, dataGubun, itemCodeÎäî Í±¥ÎÑàÎõ∞Í∏∞
                if (['dataTime', 'dataGubun', 'itemCode'].includes(area)) return;

                // ÏßÄÏó≠Î™Ö ÌïúÍ∏Ä Î≥ÄÌôò
                const areaName =
                    {
                        seoul: 'ÏÑúÏö∏',
                        busan: 'Î∂ÄÏÇ∞',
                        daegu: 'ÎåÄÍµ¨',
                        incheon: 'Ïù∏Ï≤ú',
                        gwangju: 'Í¥ëÏ£º',
                        daejeon: 'ÎåÄÏ†Ñ',
                        ulsan: 'Ïö∏ÏÇ∞',
                        sejong: 'ÏÑ∏Ï¢Ö',
                        gyeonggi: 'Í≤ΩÍ∏∞',
                        gangwon: 'Í∞ïÏõê',
                        chungbuk: 'Ï∂©Î∂Å',
                        chungnam: 'Ï∂©ÎÇ®',
                        jeonbuk: 'Ï†ÑÎ∂Å',
                        jeonnam: 'Ï†ÑÎÇ®',
                        gyeongbuk: 'Í≤ΩÎ∂Å',
                        gyeongnam: 'Í≤ΩÎÇ®',
                        jeju: 'Ï†úÏ£º',
                    }[area] || area;

                const pm10 = Number(value || 0);

                if (isNaN(pm10)) {
                    console.warn(`'${areaName}'Ïùò PM10 Í∞íÏù¥ Ïà´ÏûêÍ∞Ä ÏïÑÎãôÎãàÎã§: ${value}`);
                    return;
                }

                const pm10GradeText = getGradeText(pm10, 'PM10');

                if (pm10 >= PM10_BAD) {
                    pm10BadAreas.push(`‚Ä¢ ${areaName}: ${pm10} (${pm10GradeText})`);
                }
            });
        });

        // PM25 Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
        pm25Items.forEach((item) => {
            // dataTimeÏù¥ ÏûàÎäî Í≤ΩÏö∞ÏóêÎßå Ï≤òÎ¶¨
            if (!item.dataTime) return;

            // Î™®Îì† ÏßÄÏó≠ Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
            Object.entries(item).forEach(([area, value]) => {
                // dataTime, dataGubun, itemCodeÎäî Í±¥ÎÑàÎõ∞Í∏∞
                if (['dataTime', 'dataGubun', 'itemCode'].includes(area)) return;

                // ÏßÄÏó≠Î™Ö ÌïúÍ∏Ä Î≥ÄÌôò
                const areaName =
                    {
                        seoul: 'ÏÑúÏö∏',
                        busan: 'Î∂ÄÏÇ∞',
                        daegu: 'ÎåÄÍµ¨',
                        incheon: 'Ïù∏Ï≤ú',
                        gwangju: 'Í¥ëÏ£º',
                        daejeon: 'ÎåÄÏ†Ñ',
                        ulsan: 'Ïö∏ÏÇ∞',
                        sejong: 'ÏÑ∏Ï¢Ö',
                        gyeonggi: 'Í≤ΩÍ∏∞',
                        gangwon: 'Í∞ïÏõê',
                        chungbuk: 'Ï∂©Î∂Å',
                        chungnam: 'Ï∂©ÎÇ®',
                        jeonbuk: 'Ï†ÑÎ∂Å',
                        jeonnam: 'Ï†ÑÎÇ®',
                        gyeongbuk: 'Í≤ΩÎ∂Å',
                        gyeongnam: 'Í≤ΩÎÇ®',
                        jeju: 'Ï†úÏ£º',
                    }[area] || area;

                const pm25 = Number(value || 0);

                if (isNaN(pm25)) {
                    console.warn(`'${areaName}'Ïùò PM2.5 Í∞íÏù¥ Ïà´ÏûêÍ∞Ä ÏïÑÎãôÎãàÎã§: ${value}`);
                    return;
                }

                const pm25GradeText = getGradeText(pm25, 'PM25');

                if (pm25 >= PM25_BAD) {
                    pm25BadAreas.push(`‚Ä¢ ${areaName}: ${pm25} (${pm25GradeText})`);
                }
            });
        });

        function escapeMarkdownV2(text) {
            return text.replace(/([_*\[\]()~`>#+\-=|{}.!\\])/g, '\\$1');
        }
        
        // Î©îÏãúÏßÄ ÏÉùÏÑ±
        let message = '';
        
        if (pm10Items.length > 0) {
            const dataTime = escapeMarkdownV2(pm10Items[0].dataTime);
            message += `${dataTime}\n*Ï∏°Ï†ï*\n\n`;
        }
        
        if (pm10BadAreas.length) {
            message += `*ÎØ∏ÏÑ∏Î®ºÏßÄ PM10 \\(Îã®ÏúÑ „éç\\/„é•\\):*\n${pm10BadAreas.map(escapeMarkdownV2).join('\n')}\n\n`;
        }
        
        if (pm25BadAreas.length) {
            message += `*Ï¥àÎØ∏ÏÑ∏Î®ºÏßÄ PM2\\.5 \\(Îã®ÏúÑ „éç\\/„é•\\):*\n${pm25BadAreas.map(escapeMarkdownV2).join('\n')}\n\n`;
        }
        
        if (pm10BadAreas.length >= 1 || pm25BadAreas.length >= 1) {
            await axios.post(`https://api.telegram.org/bot${botToken}/sendMessage`, {
                chat_id: chatId,
                text: message,
                parse_mode: 'MarkdownV2',
            });
        }
    } catch (error) {
        console.error('‚ùå Ïò§Î•ò:', error.message);
        if (error.response) {
            console.error('API ÏùëÎãµ:', JSON.stringify(error.response.data, null, 2));
        }
    }
})();
